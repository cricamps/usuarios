package usuarios.usuarios.controller;

import usuarios.usuarios.model.Direccion;
import usuarios.usuarios.service.UsuarioService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/direcciones")
public class DireccionController {

    @Autowired
    private UsuarioService usuarioService;

    // GET /direcciones - Obtener todas las direcciones
    @GetMapping
    public ResponseEntity<Map<String, Object>> obtenerTodasLasDirecciones() {
        List<Direccion> direcciones = usuarioService.obtenerTodasLasDirecciones();
        
        Map<String, Object> respuesta = Map.of(
            "mensaje", "Lista de direcciones obtenida exitosamente",
            "total", direcciones.size(),
            "datos", direcciones
        );
        
        return ResponseEntity.ok(respuesta);
    }

    // GET /direcciones/despacho - Obtener solo direcciones habilitadas para despacho
    @GetMapping("/despacho")
    public ResponseEntity<Map<String, Object>> obtenerDireccionesDeDespacho() {
        List<Direccion> direccionesDespacho = usuarioService.obtenerDireccionesDeDespacho();
        
        Map<String, Object> respuesta = Map.of(
            "mensaje", "Lista de direcciones de despacho obtenida exitosamente",
            "total", direccionesDespacho.size(),
            "datos", direccionesDespacho
        );
        
        return ResponseEntity.ok(respuesta);
    }

    // GET /direcciones/usuario/{usuarioId} - Obtener direcciones por usuario
    @GetMapping("/usuario/{usuarioId}")
    public ResponseEntity<Map<String, Object>> obtenerDireccionesPorUsuario(@PathVariable Long usuarioId) {
        List<Direccion> direcciones = usuarioService.obtenerDireccionesPorUsuario(usuarioId);
        
        Map<String, Object> respuesta = Map.of(
            "mensaje", "Direcciones del usuario obtenidas exitosamente",
            "usuarioId", usuarioId,
            "total", direcciones.size(),
            "datos", direcciones
        );
        
        return ResponseEntity.ok(respuesta);
    }

    // GET /direcciones/region/{region} - Buscar direcciones por región
    @GetMapping("/region/{region}")
    public ResponseEntity<Map<String, Object>> buscarDireccionesPorRegion(@PathVariable String region) {
        List<Direccion> direcciones = usuarioService.buscarDireccionesPorRegion(region);
        
        Map<String, Object> respuesta = Map.of(
            "mensaje", "Direcciones de la región '" + region + "' obtenidas exitosamente",
            "region", region,
            "total", direcciones.size(),
            "datos", direcciones
        );
        
        return ResponseEntity.ok(respuesta);
    }

    // GET /direcciones/regiones/disponibles - Obtener lista de regiones disponibles
    @GetMapping("/regiones/disponibles")
    public ResponseEntity<Map<String, Object>> obtenerRegionesDisponibles() {
        List<String> regionesDisponibles = List.of(
            Direccion.Regiones.METROPOLITANA,
            Direccion.Regiones.VALPARAISO,
            Direccion.Regiones.BIOBIO,
            Direccion.Regiones.ARAUCANIA,
            Direccion.Regiones.LOS_LAGOS
        );
        
        Map<String, Object> respuesta = Map.of(
            "mensaje", "Lista de regiones disponibles para despacho",
            "total", regionesDisponibles.size(),
            "datos", Map.of(
                "regiones", regionesDisponibles,
                "cobertura", "El sistema actualmente cubre las principales regiones de Chile",
                "detalles", Map.of(
                    "Región Metropolitana", "Santiago y alrededores",
                    "Región de Valparaíso", "Valparaíso, Viña del Mar, Quilpué",
                    "Región del Biobío", "Concepción, Talcahuano, Los Ángeles",
                    "Región de La Araucanía", "Temuco, Villarrica, Pucón",
                    "Región de Los Lagos", "Puerto Montt, Osorno, Puerto Varas"
                )
            )
        );
        
        return ResponseEntity.ok(respuesta);
    }

    // GET /direcciones/validar/{id} - Validar si una dirección es válida para despacho
    @GetMapping("/validar/{id}")
    public ResponseEntity<Map<String, Object>> validarDireccionParaDespacho(@PathVariable Long id) {
        List<Direccion> todasDirecciones = usuarioService.obtenerTodasLasDirecciones();
        Direccion direccion = todasDirecciones.stream()
            .filter(d -> d.getId().equals(id))
            .findFirst()
            .orElse(null);
            
        if (direccion == null) {
            Map<String, Object> error = Map.of(
                "mensaje", "Dirección no encontrada",
                "direccionId", id,
                "datos", (Object) null
            );
            return ResponseEntity.notFound().build();
        }
        
        boolean esValida = direccion.esValidaParaDespacho();
        
        Map<String, Object> respuesta = Map.of(
            "mensaje", "Validación de dirección realizada",
            "direccionId", id,
            "esValida", esValida,
            "datos", Map.of(
                "direccion", direccion.getDireccionCompleta(),
                "valida", esValida,
                "esDespacho", direccion.getEsDespacho(),
                "razon", esValida ? 
                    "Dirección válida para despacho" : 
                    "Dirección incompleta o no habilitada para despacho",
                "detalles", direccion
            )
        );
        
        return ResponseEntity.ok(respuesta);
    }

    // GET /direcciones/estadisticas - Obtener estadísticas de direcciones
    @GetMapping("/estadisticas")
    public ResponseEntity<Map<String, Object>> obtenerEstadisticasDirecciones() {
        List<Direccion> todasDirecciones = usuarioService.obtenerTodasLasDirecciones();
        List<Direccion> direccionesDespacho = usuarioService.obtenerDireccionesDeDespacho();
        
        // Contar direcciones por región
        Map<String, Long> direccionesPorRegion = todasDirecciones.stream()
            .collect(java.util.stream.Collectors.groupingBy(
                Direccion::getRegion,
                java.util.stream.Collectors.counting()
            ));
        
        Map<String, Object> estadisticas = Map.of(
            "totalDirecciones", todasDirecciones.size(),
            "direccionesDeDespacho", direccionesDespacho.size(),
            "direccionesConReferencia", todasDirecciones.stream()
                .mapToInt(d -> d.getReferencia() != null ? 1 : 0)
                .sum(),
            "direccionesPorRegion", direccionesPorRegion
        );
        
        Map<String, Object> respuesta = Map.of(
            "mensaje", "Estadísticas de direcciones obtenidas exitosamente",
            "datos", estadisticas
        );
        
        return ResponseEntity.ok(respuesta);
    }

    // GET /direcciones/buscar/completas - Obtener direcciones con información completa
    @GetMapping("/buscar/completas")
    public ResponseEntity<Map<String, Object>> obtenerDireccionesCompletas() {
        List<Direccion> todasDirecciones = usuarioService.obtenerTodasLasDirecciones();
        
        List<Map<String, Object>> direccionesCompletas = todasDirecciones.stream()
            .map(direccion -> Map.of(
                "id", direccion.getId(),
                "direccionCompleta", direccion.getDireccionCompleta(),
                "esDespacho", direccion.getEsDespacho(),
                "esValidaParaDespacho", direccion.esValidaParaDespacho(),
                "usuarioId", direccion.getUsuarioId(),
                "referencia", direccion.getReferencia() != null ? direccion.getReferencia() : "Sin referencia",
                "detalles", direccion
            ))
            .toList();
        
        Map<String, Object> respuesta = Map.of(
            "mensaje", "Direcciones con información completa obtenidas exitosamente",
            "total", direccionesCompletas.size(),
            "datos", direccionesCompletas
        );
        
        return ResponseEntity.ok(respuesta);
    }
}
